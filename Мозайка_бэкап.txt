-- Создание базы данных (если её ещё нет)
CREATE DATABASE IF NOT EXISTS mosaic_production;

-- Использование базы данных
USE mosaic_production;

-- Таблица Поставщики
CREATE TABLE Supplier (
    supplier_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_type VARCHAR(255) NOT NULL,
    supplier_name VARCHAR(255) NOT NULL,
    inn VARCHAR(20) NOT NULL
);

-- Таблица Материалы
CREATE TABLE Material (
    material_id INT AUTO_INCREMENT PRIMARY KEY,
    material_type VARCHAR(255) NOT NULL,
    material_name VARCHAR(255) NOT NULL,
    description TEXT,
    unit_of_measure VARCHAR(50) NOT NULL,
    package_quantity DECIMAL(10, 2) NOT NULL,
    cost DECIMAL(10, 2) NOT NULL,
    quantity_in_stock DECIMAL(10, 2) NOT NULL,
    minimum_stock_level DECIMAL(10, 2) NOT NULL,
    image_path VARCHAR(255)
);

-- Таблица Поставки
CREATE TABLE Supply (
    supply_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_id INT NOT NULL,
    material_id INT NOT NULL,
    supply_date DATE NOT NULL,
    quantity DECIMAL(10, 2) NOT NULL,
    supply_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (supplier_id) REFERENCES Supplier(supplier_id),
    FOREIGN KEY (material_id) REFERENCES Material(material_id)
);

-- Таблица История изменения количества материала
CREATE TABLE Material_stock_history (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    material_id INT NOT NULL,
    change_date DATETIME NOT NULL,
    change_quantity DECIMAL(10, 2) NOT NULL,
    reason VARCHAR(255) NOT NULL,
    FOREIGN KEY (material_id) REFERENCES Material(material_id)
);

-- Таблица Партнеры
CREATE TABLE Partner (
    partner_id INT AUTO_INCREMENT PRIMARY KEY,
    partner_type VARCHAR(255) NOT NULL,  -- Тип партнера (розничный, оптовый, интернет-магазин)
    company_name VARCHAR(255) NOT NULL,
    legal_address VARCHAR(255),
    inn VARCHAR(20) NOT NULL,
    director_name VARCHAR(255),
    phone VARCHAR(20),
    email VARCHAR(255),
    logo_path VARCHAR(255),
    rating INT DEFAULT 0, --  Рейтинг партнера
    discount_rate DECIMAL(5,2) DEFAULT 0.00, -- Скидка партнера
    PRIMARY KEY (partner_id)
);

-- Таблица Места продаж партнеров (многие ко многим)
CREATE TABLE Partner_Sales_Location (
    partner_id INT NOT NULL,
    sales_location VARCHAR(255) NOT NULL,
    PRIMARY KEY (partner_id, sales_location),
    FOREIGN KEY (partner_id) REFERENCES Partner(partner_id)
);

-- Таблица История реализации продукции партнерами (для расчета скидок)
CREATE TABLE Partner_Sales_History (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    partner_id INT NOT NULL,
    sale_date DATE NOT NULL,
    product_id INT NOT NULL,  -- Ссылка на таблицу продукции (ее еще нет)
    quantity DECIMAL(10, 2) NOT NULL,
    sale_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (partner_id) REFERENCES Partner(partner_id)
    -- FOREIGN KEY (product_id) REFERENCES Product(product_id)  -- Добавим позже, когда создадим таблицу Product
);

-- Таблица Менеджеры
CREATE TABLE Manager (
    manager_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    -- Другие поля менеджера (например, контактные данные)
    phone VARCHAR(20),
    email VARCHAR(255)
);

-- Таблица Связь менеджеров и партнеров (один ко многим)
CREATE TABLE Manager_Partner (
    manager_id INT NOT NULL,
    partner_id INT NOT NULL,
    PRIMARY KEY (manager_id, partner_id),
    FOREIGN KEY (manager_id) REFERENCES Manager(manager_id),
    FOREIGN KEY (partner_id) REFERENCES Partner(partner_id)
);

-- Таблица История изменения рейтинга партнера
CREATE TABLE Partner_Rating_History (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    partner_id INT NOT NULL,
    change_date DATETIME NOT NULL,
    old_rating INT NOT NULL,
    new_rating INT NOT NULL,
    reason VARCHAR(255),
    manager_id INT,  -- Кто изменил рейтинг
    FOREIGN KEY (partner_id) REFERENCES Partner(partner_id),
    FOREIGN KEY (manager_id) REFERENCES Manager(manager_id) -- Ссылка на таблицу менеджеров
);

-- Таблица Заявки
CREATE TABLE Request (
    request_id INT AUTO_INCREMENT PRIMARY KEY,
    partner_id INT NOT NULL,
    manager_id INT NOT NULL,
    request_date DATETIME NOT NULL,
    status VARCHAR(50) NOT NULL, -- Статус заявки (новая, в работе, согласована, отменена, оплачена, выполнена)
    total_cost DECIMAL(15, 2),
    production_date DATE, -- Дата производства
    prepayment_date DATE, -- Дата предоплаты
    delivery_date DATE,   -- Дата доставки
    FOREIGN KEY (partner_id) REFERENCES Partner(partner_id),
    FOREIGN KEY (manager_id) REFERENCES Manager(manager_id)
);

-- Таблица Состав заявки (многие ко многим с Request и Product)
CREATE TABLE Request_Item (
    request_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,  -- Цена за единицу товара в заявке
    PRIMARY KEY (request_id, product_id),
    FOREIGN KEY (request_id) REFERENCES Request(request_id)
    -- FOREIGN KEY (product_id) REFERENCES Product(product_id) -- Добавим позже, когда создадим таблицу Product
);

-- Таблица Сотрудники
CREATE TABLE Employee (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255),
    birth_date DATE,
    passport_data VARCHAR(255),
    bank_details VARCHAR(255),
    family_status VARCHAR(255),
    health_info TEXT
);

-- Таблица Кадры (допуск к оборудованию)
CREATE TABLE Employee_Equipment_Access (
    employee_id INT NOT NULL,
    equipment_id INT NOT NULL, -- Ссылка на таблицу оборудования (ее еще нет)
    PRIMARY KEY (employee_id, equipment_id),
    FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)
    -- FOREIGN KEY (equipment_id) REFERENCES Equipment(equipment_id) -- Добавим позже, когда создадим таблицу Equipment
);

-- Таблица Доступ (карты сотрудников, турникеты - упрощенно)
CREATE TABLE Access_Log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    access_date DATETIME NOT NULL,
    location VARCHAR(255),  -- Например, "Турникет 1", "Дверь склада"
    FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)
);

-- Таблица Продукция
CREATE TABLE Product (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    article VARCHAR(255) NOT NULL UNIQUE,
    product_type VARCHAR(255) NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    image_path VARCHAR(255),
    min_price_for_partner DECIMAL(10, 2) NOT NULL,
    package_length DECIMAL(10, 2),
    package_width DECIMAL(10, 2),
    package_height DECIMAL(10, 2),
    weight_without_package DECIMAL(10, 2),
    weight_with_package DECIMAL(10, 2),
    quality_certificate_path VARCHAR(255),
    standard_number VARCHAR(255),
    production_time INT, -- Время изготовления (в часах)
    cost_price DECIMAL(10, 2), -- Себестоимость
    workshop_number INT,  -- Номер цеха
    employees_in_production INT -- Количество человек на производстве
);

-- Таблица История изменения минимальной стоимости продукции для партнера
CREATE TABLE Product_Price_History (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    change_date DATETIME NOT NULL,
    old_price DECIMAL(10, 2) NOT NULL,
    new_price DECIMAL(10, 2) NOT NULL,
    reason VARCHAR(255),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

-- Таблица Склад
CREATE TABLE Warehouse (
    warehouse_id INT AUTO_INCREMENT PRIMARY KEY,
    warehouse_name VARCHAR(255),
    location VARCHAR(255)
);

-- Таблица Складские остатки (многие ко многим)
CREATE TABLE Warehouse_Stock (
    warehouse_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (warehouse_id, product_id),
    FOREIGN KEY (warehouse_id) REFERENCES Warehouse(warehouse_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

-- Таблица Движение материалов на складе (логирование)
CREATE TABLE Warehouse_Material_Movement (
    movement_id INT AUTO_INCREMENT PRIMARY KEY,
    warehouse_id INT NOT NULL,
    material_id INT NOT NULL,
    movement_date DATETIME NOT NULL,
    quantity DECIMAL(10, 2) NOT NULL,
    movement_type VARCHAR(50) NOT NULL, -- Поступление, отпуск, списание
    reason VARCHAR(255),  -- Причина движения
    FOREIGN KEY (warehouse_id) REFERENCES Warehouse(warehouse_id),
    FOREIGN KEY (material_id) REFERENCES Material(material_id)
);

-- Таблица Движение продукции на складе (логирование)
CREATE TABLE Warehouse_Product_Movement (
    movement_id INT AUTO_INCREMENT PRIMARY KEY,
    warehouse_id INT NOT NULL,
    product_id INT NOT NULL,
    movement_date DATETIME NOT NULL,
    quantity INT NOT NULL,
    movement_type VARCHAR(50) NOT NULL, -- Поступление, отпуск, списание
    reason VARCHAR(255),  -- Причина движения
    FOREIGN KEY (warehouse_id) REFERENCES Warehouse(warehouse_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

-- Таблица Необходимые материалы для производства продукции (многие ко многим)
CREATE TABLE Product_Material (
    product_id INT NOT NULL,
    material_id INT NOT NULL,
    quantity DECIMAL(10, 2) NOT NULL, -- Количество материала, необходимое для производства единицы продукции
    PRIMARY KEY (product_id, material_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id),
    FOREIGN KEY (material_id) REFERENCES Material(material_id)
);

-- Связываем таблицы Product и Request_Item (теперь можно создать FK)
ALTER TABLE Request_Item ADD FOREIGN KEY (product_id) REFERENCES Product(product_id);

-- Связываем таблицы Partner_Sales_History и Product (теперь можно создать FK)
ALTER TABLE Partner_Sales_History ADD FOREIGN KEY (product_id) REFERENCES Product(product_id);

-- Связываем таблицы Employee_Equipment_Access и  Добавляем таблицу Equipment (Оборудование)

CREATE TABLE Equipment (
    equipment_id INT AUTO_INCREMENT PRIMARY KEY,
    equipment_name VARCHAR(255) NOT NULL,
    description TEXT
);

ALTER TABLE Employee_Equipment_Access ADD FOREIGN KEY (equipment_id) REFERENCES Equipment(equipment_id);